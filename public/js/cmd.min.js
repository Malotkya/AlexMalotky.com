const ENTER=13;const UP_ARROW=38;const DOWN_ARROW=40;const getKeyCode=e=>{if(window.event){return e.keyCode}else if(e.which){return e.which}return 0};const help=(terminal,args)=>{let output=$("<div>").css("margin-left","4ch");for(const key in terminal.functions){output.append(`${ key } - ${terminal.functionDescription[key]}<br/>`)}terminal.print(output)};const reset=(terminal,args)=>{terminal.println("Reseting !indow!");window.location.reload()};const exit=(terminal,args)=>{terminal.println("Good Bie!");window.close()};const about=(terminal,args)=>{terminal.println("About info comming soon!")};const print=(terminal,args)=>{let string=args.splice(1,args.length-1).join(" ");terminal.print($("<div>").html(string))};class App{constructor(call,description){this.call=call;this.description=description};main(terminal,args){terminal.println("Hello World!")}};class Terminal{constructor(object){this.output=$("<div>").attr("id","history").appendTo(object).css({"position":"absolute","bottom":"1.2em","left":"0","width":"100%","margin":"0","overflow":"auto","maxHeight":"calc(100% - 1em)","wordBreak":"break-all"});this.preCursor=$("<div>").text("$:").appendTo(object).css({"position":"absolute","bottom":"0","left":"0"});this.input=$("<input>").appendTo(object).attr({"autocomplete":"off","type":"text"}).css({"position":"absolute","bottom":"0","left":"3ch","background-color":"inherit","color":"inherit","font-family":"inherit","border-style":"none","font-size":"inherit","width":"calc(100% - 3ch)"}).keydown(this.getInput);this.functions={};this.functionDescription={};this.history=[];this.historyLocation=-1;this.init()};init=()=>{this.addFunction("help","Displays this list of functions",help);this.addFunction("exit","Closes the tab",exit);this.addFunction("reset","Refreshes the tab",reset);this.addFunction("list","Displays this list of functions",help);this.addFunction("about","Displays more info about this app",about);this.addFunction("print","Will print the rest of the line as html instead of text",print);this.input.focus()};moveHistory=it=>{if(this.history.length>0){this.historyLocation+=it;if(this.historyLocation<0){this.historyLocation=0}if(this.historyLocation>=this.history.length){this.historyLocation=this.history.length-1}this.input.val(this.history[this.historyLocation])}};addToHistory=string=>{this.println(this.preCursor.text()+" "+string);this.history.push(string);this.historyLocation=this.history.length};println=input=>$("<div>").text(input).appendTo(this.output)[0].scrollIntoView();print=input=>input.appendTo(this.output)[0].scrollIntoView();addFunction=(call,description,callback)=>{this.functions[call]=callback;this.functionDescription[call]=description};addApp=app=>{if((typeof app.call==="string")&&(typeof app.description==="string")&&(typeof app.main==="function")){this.functions[app.call.toLowerCase()]=app.main;this.functionDescription[app.call.toLowerCase()]=app.description}};setPreCursor=string=>{let length=string.length+1;this.preCursor.text(string);this.input.css({"left":`${ length }ch`,"width":`calc(100% - ${ length }ch)`})};run=cmd=>{this.addToHistory(cmd);let args=cmd.split(/\s+/);let callback=this.functions[args[0].toLowerCase()];if(callback===undefined){this.println("Unkown Command!")}else{callback(this,args)}};getInput=event=>{let keyCode=getKeyCode(event);switch(keyCode){case ENTER:this.run(this.input.val());this.input.val("");break;case UP_ARROW:this.moveHistory(-1);break;case DOWN_ARROW:this.moveHistory(1);break}}};const init=()=>{let terminal=new Terminal(document.querySelector("#wrapper"));terminal.println("Welcome to AlexMalotky.com");terminal.addFunction("set","Can be used to apply css properties to the page",set);terminal.addApp(new App("doIt","A basic hello world app"));terminal.addApp(new myApp())};window.onload=init;const set=(terminal,args)=>{switch(args[1].toLowerCase()){case "help":terminal.println("Any css property can be changed/added to the body element of this page using this property.");terminal.println("Additionaly using preCursor will change the string before each input");terminal.println("I have also added the functionality that font-color works the same as color.");break;case "precursor":terminal.setPreCursor(args[2]);break;case "font-color":args[1]="color";default:document.querySelector("body").style[args[1]]=args[2]}};class myApp extends App{constructor(){super("count","counts numbers and remembers how much it has counted");this.total=0}main=(terminal,args)=>{let input=Number(args[1]);if(input>0){let count=0;while(count<input){terminal.println(count+=1)}this.total+=input}terminal.println(`I have counted a total number of ${this.total }`)}};
